import cv2
import numpy as np


def detect_shape(contour):
    shape = "Unidentified"
    peri = cv2.arcLength(contour, True)  
    approx = cv2.approxPolyDP(contour, 0.04 * peri, True) 
    
    vertices = len(approx)

    # Triangle
    if vertices == 3:
        shape = "Triangle"
    
    
    elif vertices == 4:
        (x, y, w, h) = cv2.boundingRect(approx)
        aspect_ratio = w / float(h)
        
        if 0.95 <= aspect_ratio <= 1.05:
            shape = "Square"
        else:
           
            shape = "Rectangle"
    
    # Pentagon
    elif vertices == 5:
        shape = "Pentagon"
    
    # Hexagon
    elif vertices == 6:
        shape = "Hexagon"
    
    # Circle or any shape with more than 6 vertices
    else:
        area = cv2.contourArea(contour)
        circularity = 4 * np.pi * (area / (peri * peri))
        if circularity > 0.8:  
            shape = "Circle"
        else:
            shape = "Polygon"
    
    return shape

cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)

    
    edged = cv2.Canny(blurred, 50, 150)

    contours, _ = cv2.findContours(edged, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    for contour in contours:
        
        if cv2.contourArea(contour) < 500:
            continue
        
        
        M = cv2.moments(contour)
        if M['m00'] != 0:
            cX = int(M['m10'] / M['m00'])
            cY = int(M['m01'] / M['m00'])
        else:
            cX, cY = 0, 0
       
        shape = detect_shape(contour)
        cv2.drawContours(frame, [contour], -1, (0, 255, 0), 2)
        cv2.putText(frame, shape, (cX - 20, cY - 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)

    cv2.imshow("Shape Detection", frame)

    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
